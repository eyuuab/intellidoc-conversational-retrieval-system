import streamlit as st
import os
from pathlib import Path
import json
from vector_store.chroma_store import collection, client
import shutil

st.set_page_config(
    page_title="Settings - IntelliDoc",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .settings-header {
        font-size: 2.5rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 2rem;
    }
    
    .settings-section {
        background-color: #f8f9ff;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #667eea;
    }
    
    .danger-zone {
        background-color: #fff5f5;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #e53e3e;
    }
    
    .success-box {
        background-color: #f0fff4;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #9ae6b4;
        color: #2f855a;
        margin: 1rem 0;
    }
    
    .warning-box {
        background-color: #fffbf0;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #fbd38d;
        color: #c05621;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def load_env_file():
    """Load environment variables from .env file"""
    env_vars = {}
    env_path = Path(".env")
    
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    
    return env_vars

def save_env_file(env_vars):
    """Save environment variables to .env file"""
    try:
        with open(".env", 'w') as f:
            f.write("# IntelliDoc Environment Configuration\n")
            f.write("# Generated by Streamlit Settings Page\n\n")
            
            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")
        
        return True
    except Exception as e:
        st.error(f"Error saving .env file: {str(e)}")
        return False

def get_system_info():
    """Get system information"""
    try:
        # Vector store info
        doc_count = collection.count()
        
        # Check if chroma_data directory exists and get size
        chroma_path = Path("chroma_data")
        if chroma_path.exists():
            total_size = sum(f.stat().st_size for f in chroma_path.rglob('*') if f.is_file())
            chroma_size = f"{total_size / (1024*1024):.2f} MB"
        else:
            chroma_size = "0 MB"
        
        return {
            'document_count': doc_count,
            'chroma_size': chroma_size,
            'chroma_path_exists': chroma_path.exists()
        }
    except Exception as e:
        return {
            'document_count': 0,
            'chroma_size': "Unknown",
            'chroma_path_exists': False,
            'error': str(e)
        }

def clear_vector_store():
    """Clear all documents from the vector store"""
    try:
        # Get all document IDs
        results = collection.get()
        if results['ids']:
            collection.delete(ids=results['ids'])
        return True
    except Exception as e:
        st.error(f"Error clearing vector store: {str(e)}")
        return False

def main():
    st.markdown('<h1 class="settings-header">‚öôÔ∏è Settings & Configuration</h1>', unsafe_allow_html=True)
    
    # Load current environment variables
    env_vars = load_env_file()
    
    # System Information
    st.markdown("## üñ•Ô∏è System Information")
    
    system_info = get_system_info()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìö Documents in Vector Store", system_info['document_count'])
    
    with col2:
        st.metric("üíæ Vector Store Size", system_info['chroma_size'])
    
    with col3:
        status = "‚úÖ Active" if system_info['chroma_path_exists'] else "‚ùå Not Found"
        st.metric("üóÑÔ∏è Vector Store Status", status)
    
    # Environment Configuration
    st.markdown("## üîß Environment Configuration")
    
    with st.container():
        st.markdown('<div class="settings-section">', unsafe_allow_html=True)
        st.markdown("### üîë API Keys & Credentials")
        
        # Google API Key
        google_api_key = st.text_input(
            "Google API Key",
            value=env_vars.get('GOOGLE_API_KEY', ''),
            type="password",
            help="Required for Google Gemini Pro integration"
        )
        
        # Server Configuration
        st.markdown("### üåê Server Configuration")
        
        col1, col2 = st.columns(2)
        
        with col1:
            host = st.text_input(
                "Host",
                value=env_vars.get('HOST', '127.0.0.1'),
                help="Server host address"
            )
        
        with col2:
            port = st.number_input(
                "Port",
                value=int(env_vars.get('PORT', 8001)),
                min_value=1000,
                max_value=65535,
                help="Server port number"
            )
        
        # ChromaDB Configuration
        st.markdown("### üóÑÔ∏è Vector Store Configuration")
        
        chroma_db_path = st.text_input(
            "ChromaDB Path",
            value=env_vars.get('CHROMA_DB_PATH', 'chroma_data'),
            help="Path to ChromaDB storage directory"
        )
        
        # Embedding Configuration
        st.markdown("### üß† Embedding Configuration")
        
        embedding_model = st.selectbox(
            "Embedding Model",
            options=[
                "all-MiniLM-L6-v2",
                "all-mpnet-base-v2",
                "all-distilroberta-v1",
                "paraphrase-multilingual-MiniLM-L12-v2"
            ],
            index=0 if env_vars.get('EMBEDDING_MODEL', 'all-MiniLM-L6-v2') == 'all-MiniLM-L6-v2' else 0,
            help="Sentence transformer model for embeddings"
        )
        
        # File Upload Configuration
        st.markdown("### üìÅ File Upload Configuration")
        
        col1, col2 = st.columns(2)
        
        with col1:
            max_file_size = st.number_input(
                "Max File Size (MB)",
                value=int(env_vars.get('MAX_FILE_SIZE', 10485760)) // (1024*1024),
                min_value=1,
                max_value=100,
                help="Maximum file size for uploads"
            )
        
        with col2:
            allowed_extensions = st.text_input(
                "Allowed Extensions",
                value=env_vars.get('ALLOWED_EXTENSIONS', 'pdf,txt'),
                help="Comma-separated list of allowed file extensions"
            )
        
        # Development Settings
        st.markdown("### üîß Development Settings")
        
        col1, col2 = st.columns(2)
        
        with col1:
            debug = st.checkbox(
                "Debug Mode",
                value=env_vars.get('DEBUG', 'True').lower() == 'true'
            )
        
        with col2:
            reload = st.checkbox(
                "Auto Reload",
                value=env_vars.get('RELOAD', 'True').lower() == 'true'
            )
        
        # Save Configuration Button
        if st.button("üíæ Save Configuration", type="primary"):
            new_env_vars = {
                'GOOGLE_API_KEY': google_api_key,
                'HOST': host,
                'PORT': str(port),
                'CHROMA_DB_PATH': chroma_db_path,
                'EMBEDDING_MODEL': embedding_model,
                'MAX_FILE_SIZE': str(max_file_size * 1024 * 1024),
                'ALLOWED_EXTENSIONS': allowed_extensions,
                'DEBUG': str(debug),
                'RELOAD': str(reload)
            }
            
            if save_env_file(new_env_vars):
                st.markdown("""
                <div class="success-box">
                    ‚úÖ Configuration saved successfully! Restart the application to apply changes.
                </div>
                """, unsafe_allow_html=True)
            else:
                st.error("‚ùå Failed to save configuration.")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Data Management
    st.markdown("## üìä Data Management")
    
    with st.container():
        st.markdown('<div class="settings-section">', unsafe_allow_html=True)
        
        st.markdown("### üì§ Export Data")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìã Export Vector Store Metadata"):
                try:
                    results = collection.get()
                    export_data = {
                        'document_count': len(results['ids']),
                        'document_ids': results['ids'],
                        'export_timestamp': str(pd.Timestamp.now())
                    }
                    
                    st.download_button(
                        label="üíæ Download Metadata JSON",
                        data=json.dumps(export_data, indent=2),
                        file_name=f"vector_store_metadata_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
                except Exception as e:
                    st.error(f"Export failed: {str(e)}")
        
        with col2:
            if st.button("‚öôÔ∏è Export Current Configuration"):
                config_data = {
                    'environment_variables': env_vars,
                    'system_info': system_info,
                    'export_timestamp': str(pd.Timestamp.now())
                }
                
                st.download_button(
                    label="üíæ Download Config JSON",
                    data=json.dumps(config_data, indent=2),
                    file_name=f"intellidoc_config_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Danger Zone
    st.markdown("## ‚ö†Ô∏è Danger Zone")
    
    with st.container():
        st.markdown('<div class="danger-zone">', unsafe_allow_html=True)
        
        st.markdown("### üóëÔ∏è Clear All Data")
        st.markdown("**Warning:** This action cannot be undone!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üóëÔ∏è Clear Vector Store", type="secondary"):
                if clear_vector_store():
                    st.success("‚úÖ Vector store cleared successfully!")
                    st.rerun()
                else:
                    st.error("‚ùå Failed to clear vector store.")
        
        with col2:
            if st.button("üí• Reset All Settings", type="secondary"):
                if st.button("‚ö†Ô∏è Confirm Reset", type="secondary"):
                    # Create default .env file
                    default_env = {
                        'HOST': '127.0.0.1',
                        'PORT': '8001',
                        'CHROMA_DB_PATH': 'chroma_data',
                        'EMBEDDING_MODEL': 'all-MiniLM-L6-v2',
                        'MAX_FILE_SIZE': '10485760',
                        'ALLOWED_EXTENSIONS': 'pdf,txt',
                        'DEBUG': 'True',
                        'RELOAD': 'True'
                    }
                    
                    if save_env_file(default_env):
                        st.success("‚úÖ Settings reset to defaults!")
                        st.rerun()
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Help Section
    st.markdown("## ‚ùì Help & Documentation")
    
    with st.expander("üîß Configuration Help"):
        st.markdown("""
        ### Environment Variables Guide
        
        - **GOOGLE_API_KEY**: Required for Google Gemini Pro integration. Get it from Google AI Studio.
        - **HOST**: Server host address (usually 127.0.0.1 for local development)
        - **PORT**: Server port number (default: 8001)
        - **CHROMA_DB_PATH**: Directory where vector store data is saved
        - **EMBEDDING_MODEL**: Sentence transformer model for text embeddings
        - **MAX_FILE_SIZE**: Maximum file size for uploads in bytes
        - **ALLOWED_EXTENSIONS**: Comma-separated list of allowed file types
        - **DEBUG**: Enable debug mode for development
        - **RELOAD**: Enable auto-reload for development
        """)
    
    with st.expander("üö® Troubleshooting"):
        st.markdown("""
        ### Common Issues
        
        1. **Google API Key not working**: Make sure you have a valid API key from Google AI Studio
        2. **Vector store errors**: Try clearing the vector store and re-uploading documents
        3. **File upload issues**: Check file size limits and allowed extensions
        4. **Performance issues**: Consider using a smaller embedding model
        5. **Port conflicts**: Change the port number if 8001 is already in use
        """)

if __name__ == "__main__":
    import pandas as pd
    main()
